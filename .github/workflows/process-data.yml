name: Process and Refine Data

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      uv_extras:
        description: 'Space-separated uv extras to install (e.g. "dev orchestration docs")'
        required: false
        default: "dev orchestration"

jobs:
  qa:
    runs-on: ubuntu-latest
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Ruff lint
        run: uv run ruff check

      - name: Ruff formatting check
        run: uv run ruff format --check

      - name: Pytest
        run: uv run pytest

      - name: Mypy
        run: uv run mypy src scripts

      - name: Bandit
        run: uv run bandit -r scripts

      - name: Detect secrets
        run: uv run detect-secrets scan src tests scripts

      - name: Build package
        run: uv run uv build

      - name: Docker build validation
        env:
          DOCKER_BUILDKIT: "1"
        run: docker build --build-arg PYTHON_VERSION=3.13 -t hotpass-ci:pr .

  accessibility:
    runs-on: ubuntu-latest
    needs: qa
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Accessibility tests
        run: uv run pytest -m accessibility tests/accessibility

  mutation-testing:
    runs-on: ubuntu-latest
    needs: qa
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Run mutation tests
        run: uv run python scripts/qa/run_mutation_tests.py

  static-analysis:
    runs-on: ubuntu-latest
    needs: qa
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Run Semgrep
        run: uv run semgrep --config=policy/semgrep/hotpass.yml

  license-compliance:
    runs-on: ubuntu-latest
    needs: qa
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: "3.13"

      - name: Install ScanCode and reuse tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install scancode-toolkit==32.1.0 reuse==3.0.2 license-expression==30.4.4

      - name: Run ScanCode licence audit
        run: scancode --license --info --json-pp scancode-report.json --license-score 0 .

      - name: Enforce licence policy
        run: python scripts/compliance/check_scancode.py --report scancode-report.json --policy policy/licensing/allowlist.yml

      - name: Validate REUSE metadata
        run: reuse lint --dep5-path policy/reuse/dep5

  fitness-functions:
    runs-on: ubuntu-latest
    needs: qa
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Run fitness functions
        run: uv run python scripts/quality/fitness_functions.py

  process-data:
    runs-on: ubuntu-latest
    needs:
      - qa
      - accessibility
      - mutation-testing
      - static-analysis
      - fitness-functions
      - license-compliance
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Run Hotpass CLI
        run: uv run hotpass --archive --dist-dir dist

      - name: Capture packaged archive path
        id: archive
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          archives=(dist/*.zip)
          if [ ${#archives[@]} -eq 0 ]; then
            echo "No packaged archives were generated" >&2
            exit 1
          fi
          echo "archive_path=${archives[0]}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact checksums
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/checksums
          archive_path="${{ steps.archive.outputs.archive_path }}"
          archive_name="$(basename "$archive_path")"
          sha256sum "data/refined_data.xlsx" > "dist/checksums/refined_data.xlsx.sha256"
          sha256sum "$archive_path" > "dist/checksums/${archive_name}.sha256"

      - name: Upload artifact checksums
        if: success()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: refined-data-checksums
          path: dist/checksums

      - name: Upload refined data workbook
        if: success()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: refined-data
          path: data/refined_data.xlsx

      - name: Upload packaged archive
        if: success()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: refined-data-archive
          path: ${{ steps.archive.outputs.archive_path }}

  supply-chain:
    runs-on: ubuntu-latest
    needs: process-data
    env:
      UV_EXTRAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.uv_extras != '' && github.event.inputs.uv_extras || 'dev orchestration' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7
        with:
          python-version: "3.13"

      - name: Synchronise dependencies
        env:
          HOTPASS_UV_EXTRAS: ${{ env.UV_EXTRAS }}
        run: bash scripts/uv_sync_extras.sh

      - name: Build package
        run: uv run uv build

      - name: Generate SBOM
        run: uv run python scripts/supply_chain/generate_sbom.py

      - name: Generate provenance
        run: uv run python scripts/supply_chain/generate_provenance.py

      - name: Generate supply-chain checksums
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/checksums
          mapfile -t files < <(find dist/sbom dist/provenance -type f -print | sort)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No supply-chain artifacts to checksum" >&2
            exit 1
          fi
          sha256sum "${files[@]}" > dist/checksums/supply-chain.sha256

      - name: Evaluate supply-chain policy
        run: uv run python scripts/supply_chain/evaluate_policy.py dist/sbom/hotpass-sbom.json

      - name: Upload supply-chain artefacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: supply-chain-artifacts
          path: |
            dist/sbom
            dist/provenance
            dist/checksums/supply-chain.sha256

  publish-artifact:
    runs-on: ubuntu-latest
    needs:
      - process-data
      - supply-chain
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Download packaged archive
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: refined-data-archive
          path: dist

      - name: Download artifact checksums
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: refined-data-checksums
          path: dist/checksums

      - name: Publish archive to data-artifacts branch
        env:
          DATA_ARTIFACT_PAT: ${{ secrets.DATA_ARTIFACT_PAT || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          if [ -z "${DATA_ARTIFACT_PAT}" ]; then
            echo "DATA_ARTIFACT_PAT secret is required to publish artifacts" >&2
            exit 1
          fi

          git config user.name "hotpass-bot"
          git config user.email "actions@users.noreply.github.com"

          git checkout --orphan data-artifacts
          git rm -rf . || true

          archives=(dist/*.zip)
          checksums=(dist/checksums/*.sha256)
          if [ ${#archives[@]} -eq 0 ]; then
            echo "No packaged archives found to publish" >&2
            exit 1
          fi
          if [ ${#checksums[@]} -eq 0 ]; then
            echo "No checksum files found to publish" >&2
            exit 1
          fi

          cp "${archives[@]}" .
          cp "${checksums[@]}" .

          ls -1 *.zip *.sha256 > MANIFEST.txt
          git add *.zip *.sha256 MANIFEST.txt
          git commit -m "chore: update refined data archive"

          git push --force "https://${DATA_ARTIFACT_PAT}@github.com/${REPO}.git" HEAD:data-artifacts
